/**
 * Returns true if the passed value is a record (object).
 *
 * @param value The value to check
 */
declare const isRecord: (value: unknown) => value is Record<string | number, unknown>;
/**
 * Check if a value is a string.
 *
 * @param value The value to check
 */
declare const isString: (value: unknown) => value is string;
/**
 * Check if a value is a number.
 *
 * @param value The value to check
 */
declare const isNumber: (value: unknown) => value is number;
/**
 * Check if a value is an integer number.
 *
 * @param value The value to check
 */
declare const isIntegerNumber: (value: unknown) => value is number;
/**
 * Check if a value is truthy.
 *
 * @param value The value to check
 */
declare const isTruthy: (value: unknown) => boolean;
/**
 * Check if a value is null.
 *
 * @param value The value to check
 */
declare const isNull: (value: unknown) => value is null;
/**
 * Check if a value is null or undefined.
 *
 * @param value The value to check
 */
declare const isNullOrUndefined: (value: unknown) => value is null | undefined;
/**
 * Get the type of a value as a string.
 *
 * @param value The value to check
 */
declare const getType: (value: unknown) => string;
/**
 * Check if two unknown values are strictly equal.
 *
 * If the values are arrays, then each element is compared, regardless of
 * order. If the values are objects, then each key and value from left
 * is compared to the corresponding key and value from right. If the
 * values are primitives, then they are compared using strict equality.
 *
 * @param left Left side of strict equality comparison
 * @param right Right side of strict equality comparison
 */
declare const isStrictEqual: (left: unknown, right: unknown) => boolean;
export { isRecord, isString, isNumber, isIntegerNumber, isTruthy, isNull, isNullOrUndefined, getType, isStrictEqual, };
//# sourceMappingURL=typeUtils.d.ts.map