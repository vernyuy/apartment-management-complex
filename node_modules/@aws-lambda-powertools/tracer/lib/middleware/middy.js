"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.captureLambdaHandler = void 0;
/**
 * A middy middleware automating capture of metadata and annotations on segments or subsegments ofr a Lambda Handler.
 *
 * Using this middleware on your handler function will automatically:
 * * handle the subsegment lifecycle
 * * add the `ColdStart` annotation
 * * add the function response as metadata
 * * add the function error as metadata (if any)
 *
 * @example
 * ```typescript
 * import { Tracer, captureLambdaHandler } from '@aws-lambda-powertools/tracer';
 * import middy from '@middy/core';
 *
 * const tracer = new Tracer({ serviceName: 'serverlessAirline' });
 *
 * export const handler = middy(async (_event: any, _context: any) => {
 *   ...
 * }).use(captureLambdaHandler(tracer));
 * ```
 *
 * @param target - The Tracer instance to use for tracing
 * @returns middleware object - The middy middleware object
 */
const captureLambdaHandler = (target) => {
    let lambdaSegment;
    const open = () => {
        lambdaSegment = target.getSegment();
        const handlerSegment = lambdaSegment.addNewSubsegment(`## ${process.env._HANDLER}`);
        target.setSegment(handlerSegment);
    };
    const close = () => {
        const subsegment = target.getSegment();
        subsegment?.close();
        target.setSegment(lambdaSegment);
    };
    const captureLambdaHandlerBefore = async () => {
        if (target.isTracingEnabled()) {
            open();
            target.annotateColdStart();
            target.addServiceNameAnnotation();
        }
    };
    const captureLambdaHandlerAfter = async (request) => {
        if (target.isTracingEnabled()) {
            target.addResponseAsMetadata(request.response, process.env._HANDLER);
            close();
        }
    };
    const captureLambdaHandlerError = async (request) => {
        if (target.isTracingEnabled()) {
            target.addErrorAsMetadata(request.error);
            close();
        }
    };
    return {
        before: captureLambdaHandlerBefore,
        after: captureLambdaHandlerAfter,
        onError: captureLambdaHandlerError
    };
};
exports.captureLambdaHandler = captureLambdaHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9taWRkeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFDSCxNQUFNLG9CQUFvQixHQUFHLENBQUMsTUFBYyxFQUF1QixFQUFFO0lBQ25FLElBQUksYUFBbUMsQ0FBQztJQUV4QyxNQUFNLElBQUksR0FBRyxHQUFTLEVBQUU7UUFDdEIsYUFBYSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUM7SUFFRixNQUFNLEtBQUssR0FBRyxHQUFTLEVBQUU7UUFDdkIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsVUFBVSxDQUFDLGFBQXdCLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUM7SUFFRixNQUFNLDBCQUEwQixHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUMzRCxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzdCLElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDM0IsTUFBTSxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDbkM7SUFDSCxDQUFDLENBQUM7SUFFRixNQUFNLHlCQUF5QixHQUFHLEtBQUssRUFBRSxPQUFzQixFQUFpQixFQUFFO1FBQ2hGLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDN0IsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRSxLQUFLLEVBQUUsQ0FBQztTQUNUO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSx5QkFBeUIsR0FBRyxLQUFLLEVBQUUsT0FBc0IsRUFBaUIsRUFBRTtRQUNoRixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBYyxDQUFDLENBQUM7WUFDbEQsS0FBSyxFQUFFLENBQUM7U0FDVDtJQUNILENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxNQUFNLEVBQUUsMEJBQTBCO1FBQ2xDLEtBQUssRUFBRSx5QkFBeUI7UUFDaEMsT0FBTyxFQUFFLHlCQUF5QjtLQUNuQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBR0Esb0RBQW9CIn0=