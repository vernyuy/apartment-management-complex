/**
 * Creates a calculation object that computes the count of all events
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function count(alias?: string): {
    readonly operation: "COUNT";
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the count of distinct events
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function countDistinct(key: string, alias?: string): {
    readonly operation: "COUNT_DISTINCT";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the maximum value of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function max(key: string, alias?: string): {
    readonly operation: "MAX";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the minimum value of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function min(key: string, alias?: string): {
    readonly operation: "MIN";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the sum of all values of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function sum(key: string, alias?: string): {
    readonly operation: "SUM";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the average value of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function avg(key: string, alias?: string): {
    readonly operation: "AVG";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the median value of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function median(key: string, alias?: string): {
    readonly operation: "MEDIAN";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 0.1-th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p001(key: string, alias?: string): {
    readonly operation: "P001";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 1st percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p01(key: string, alias?: string): {
    readonly operation: "P01";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 5th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p05(key: string, alias?: string): {
    readonly operation: "P05";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 10th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p10(key: string, alias?: string): {
    readonly operation: "P10";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 25th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p25(key: string, alias?: string): {
    readonly operation: "P25";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 75th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p75(key: string, alias?: string): {
    readonly operation: "P75";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 90th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p90(key: string, alias?: string): {
    readonly operation: "P90";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 95th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p95(key: string, alias?: string): {
    readonly operation: "P95";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 99th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p99(key: string, alias?: string): {
    readonly operation: "P99";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the 99.9th percentile of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function p999(key: string, alias?: string): {
    readonly operation: "P999";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the standard deviation of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function stdDev(key: string, alias?: string): {
    readonly operation: "STDDEV";
    readonly key: string;
    readonly alias: string | undefined;
};
/**
 * Creates a calculation object that computes the variance of the provided key
 *  @param {string} key The key to perform the calculation on
 *  @param {string} [alias] The temporary name to give to the results of the calculation
 *  @returns {Object} A calculation object with the operation, key, and alias properties.
 */
export declare function variance(key: string, alias?: string): {
    readonly operation: "VARIANCE";
    readonly key: string;
    readonly alias: string | undefined;
};
