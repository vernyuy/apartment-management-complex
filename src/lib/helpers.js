"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUpdateExpressions = exports.updateItem = exports.createItem = void 0;
const utils_1 = require("@aws-appsync/utils");
function createItem(item) {
    return {
        ...item,
        createdAt: utils_1.util.time.nowISO8601(),
        updatedAt: utils_1.util.time.nowISO8601(),
    };
}
exports.createItem = createItem;
function updateItem(item) {
    return {
        ...item,
        updatedAt: utils_1.util.time.nowISO8601(),
    };
}
exports.updateItem = updateItem;
function generateUpdateExpressions(item) {
    const updateItem = {
        ...item,
        updatedAt: utils_1.util.time.nowISO8601(),
    };
    const updateExpression = [];
    const expressionNames = {};
    const expressionValues = {};
    for (const [key, value] of Object.entries(updateItem)) {
        updateExpression.push(`#${key} = :${key}`);
        expressionNames[`#${key}`] = key;
        expressionValues[`:${key}`] = utils_1.util.dynamodb.toDynamoDB(value);
    }
    return {
        expression: `set ${updateExpression.join(', ')}`,
        expressionNames,
        expressionValues,
    };
}
exports.generateUpdateExpressions = generateUpdateExpressions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBSzhCO0FBTzVCLFNBQWdCLFVBQVUsQ0FBbUIsSUFBTztJQUNsRCxPQUFPO1FBQ0wsR0FBRyxJQUFJO1FBQ1AsU0FBUyxFQUFFLFlBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2pDLFNBQVMsRUFBRSxZQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtLQUNsQyxDQUFDO0FBQ0osQ0FBQztBQU5ELGdDQU1DO0FBTUQsU0FBZ0IsVUFBVSxDQUFtQixJQUFPO0lBQ2xELE9BQU87UUFDTCxHQUFHLElBQUk7UUFDUCxTQUFTLEVBQUUsWUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7S0FDbEMsQ0FBQztBQUNKLENBQUM7QUFMRCxnQ0FLQztBQUVELFNBQWdCLHlCQUF5QixDQUN2QyxJQUE2QjtJQUU3QixNQUFNLFVBQVUsR0FBRztRQUNqQixHQUFHLElBQUk7UUFDUCxTQUFTLEVBQUUsWUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7S0FDbEMsQ0FBQztJQUVGLE1BQU0sZ0JBQWdCLEdBQWEsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sZUFBZSxHQUErQixFQUFFLENBQUM7SUFDdkQsTUFBTSxnQkFBZ0IsR0FBZ0MsRUFBRSxDQUFDO0lBRXpELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3JELGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2pDLGdCQUFnQixDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxZQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvRDtJQUVELE9BQU87UUFDTCxVQUFVLEVBQUUsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDaEQsZUFBZTtRQUNmLGdCQUFnQjtLQUNqQixDQUFDO0FBQ0osQ0FBQztBQXZCRCw4REF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIER5bmFtb0RCRXhwcmVzc2lvbixcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZU1hcCxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVNYXAsXG4gICAgdXRpbCxcbiAgfSBmcm9tICdAYXdzLWFwcHN5bmMvdXRpbHMnO1xuICBcbiAgZXhwb3J0IHR5cGUgQ3JlYXRlSXRlbTxUPiA9IFQgJiB7XG4gICAgdXBkYXRlZEF0OiBzdHJpbmc7XG4gICAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIH07XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlSXRlbTxUIGV4dGVuZHMgb2JqZWN0PihpdGVtOiBUKTogQ3JlYXRlSXRlbTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICBjcmVhdGVkQXQ6IHV0aWwudGltZS5ub3dJU084NjAxKCksXG4gICAgICB1cGRhdGVkQXQ6IHV0aWwudGltZS5ub3dJU084NjAxKCksXG4gICAgfTtcbiAgfVxuICBcbiAgZXhwb3J0IHR5cGUgVXBkYXRlSXRlbTxUPiA9IFQgJiB7XG4gICAgdXBkYXRlZEF0OiBzdHJpbmc7XG4gIH07XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gdXBkYXRlSXRlbTxUIGV4dGVuZHMgb2JqZWN0PihpdGVtOiBUKTogVXBkYXRlSXRlbTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICB1cGRhdGVkQXQ6IHV0aWwudGltZS5ub3dJU084NjAxKCksXG4gICAgfTtcbiAgfVxuICBcbiAgZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVXBkYXRlRXhwcmVzc2lvbnMoXG4gICAgaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICk6IER5bmFtb0RCRXhwcmVzc2lvbiB7XG4gICAgY29uc3QgdXBkYXRlSXRlbSA9IHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICB1cGRhdGVkQXQ6IHV0aWwudGltZS5ub3dJU084NjAxKCksXG4gICAgfTtcbiAgXG4gICAgY29uc3QgdXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBleHByZXNzaW9uTmFtZXM6IEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lTWFwID0ge307XG4gICAgY29uc3QgZXhwcmVzc2lvblZhbHVlczogRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwID0ge307XG4gIFxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHVwZGF0ZUl0ZW0pKSB7XG4gICAgICB1cGRhdGVFeHByZXNzaW9uLnB1c2goYCMke2tleX0gPSA6JHtrZXl9YCk7XG4gICAgICBleHByZXNzaW9uTmFtZXNbYCMke2tleX1gXSA9IGtleTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZXNbYDoke2tleX1gXSA9IHV0aWwuZHluYW1vZGIudG9EeW5hbW9EQih2YWx1ZSk7XG4gICAgfVxuICBcbiAgICByZXR1cm4ge1xuICAgICAgZXhwcmVzc2lvbjogYHNldCAke3VwZGF0ZUV4cHJlc3Npb24uam9pbignLCAnKX1gLFxuICAgICAgZXhwcmVzc2lvbk5hbWVzLFxuICAgICAgZXhwcmVzc2lvblZhbHVlcyxcbiAgICB9O1xuICB9Il19