"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../../utils");
const helpers_1 = require("../../../src/lib/helpers");
async function createApartmentBooking(appsyncInput, logger) {
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    let tableName = process.env.ACMS_DB;
    const BOOKING_QUEUE_URL = process.env.BOOKING_QUEUE_URL;
    const createdOn = Date.now().toString();
    const id = (0, utils_1.uuid)();
    const sqs = new aws_sdk_1.SQS();
    console.log(appsyncInput.input);
    if (BOOKING_QUEUE_URL === undefined) {
        logger.error(`Couldn't get the queue url name`);
        throw Error("Couldn't get queue url");
    }
    const bookingInput = (0, helpers_1.createItem)({
        id: id,
        ...appsyncInput.input,
        createdOn,
    });
    if (tableName === undefined) {
        logger.error(`Couldn't get the table name`);
        tableName = "AcmsDynamoDBTable";
    }
    logger.info(`create booking input info", ${JSON.stringify(bookingInput)}`);
    const params = {
        TableName: tableName,
        IndexName: "getAllApartmentsPerUser",
        KeyConditionExpression: "#GSI1PK = :GSI1PK AND #GSI1SK = :GSI1SK",
        FilterExpression: "#bookingStatus = :bookingStatus",
        ExpressionAttributeNames: {
            "#GSI1PK": "GSI1PK",
            "#GSI1SK": "GSI1SK",
            "#bookingStatus": "bookingStatus",
        },
        ExpressionAttributeValues: {
            ":GSI1PK": `USER#${appsyncInput.input.userId}`,
            ":GSI1SK": `APARTMENT#${appsyncInput.input.apartmentId}`,
            ":bookingStatus": "PENDING",
        },
    };
    logger.info(`sqs pre message ${JSON.stringify(bookingInput)}`);
    logger.info(`sqs  queue url ${BOOKING_QUEUE_URL}`);
    const sqsParams = {
        MessageBody: JSON.stringify(bookingInput),
        QueueUrl: BOOKING_QUEUE_URL,
    };
    try {
        await sqs.sendMessage(sqsParams).promise();
        return true;
    }
    catch (error) {
        logger.info(`an error occured while sending message to sqs", ${error}`);
        throw Error(`an error occured while sending message to sqs", ${error}`);
    }
}
exports.default = createApartmentBooking;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQXBhcnRtZW50Qm9va2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZUFwYXJ0bWVudEJvb2tpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBeUM7QUFDekMsdUNBQW1DO0FBS25DLHNEQUFzRDtBQUV0RCxLQUFLLFVBQVUsc0JBQXNCLENBQ25DLFlBQWdELEVBQ2hELE1BQWM7SUFFZCxNQUFNLGNBQWMsR0FBRyxJQUFJLGtCQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDcEMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QyxNQUFNLEVBQUUsR0FBVyxJQUFBLFlBQUksR0FBRSxDQUFDO0lBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7SUFFdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEMsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7UUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FDdkM7SUFFRCxNQUFNLFlBQVksR0FBRyxJQUFBLG9CQUFVLEVBQUM7UUFDOUIsRUFBRSxFQUFFLEVBQUU7UUFDTixHQUFHLFlBQVksQ0FBQyxLQUFLO1FBQ3JCLFNBQVM7S0FDVixDQUFDLENBQUM7SUFDSCxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7UUFDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQzVDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztLQUNqQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsK0JBQStCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLFNBQVM7UUFDcEIsU0FBUyxFQUFFLHlCQUF5QjtRQUNwQyxzQkFBc0IsRUFBRSx5Q0FBeUM7UUFDakUsZ0JBQWdCLEVBQUUsaUNBQWlDO1FBQ25ELHdCQUF3QixFQUFFO1lBQ3hCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFNBQVMsRUFBRSxRQUFRO1lBQ25CLGdCQUFnQixFQUFFLGVBQWU7U0FDbEM7UUFDRCx5QkFBeUIsRUFBRTtZQUN6QixTQUFTLEVBQUUsUUFBUSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUM5QyxTQUFTLEVBQUUsYUFBYSxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUN4RCxnQkFBZ0IsRUFBRSxTQUFTO1NBQzVCO0tBQ0YsQ0FBQztJQUVFLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUNuRCxNQUFNLFNBQVMsR0FBaUM7UUFDOUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxpQkFBaUI7S0FDNUIsQ0FBQztJQUVGLElBQUk7UUFDRixNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxtREFBbUQsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RSxNQUFNLEtBQUssQ0FBQyxtREFBbUQsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN6RTtBQUNQLENBQUM7QUFFRCxrQkFBZSxzQkFBc0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL2xvZ2dlclwiO1xuaW1wb3J0IHsgIER5bmFtb0RCLCBTUVMgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHsgdXVpZCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IENyZWF0ZUJvb2tpbmdJbnB1dCBmcm9tIFwiLi9DcmVhdGVCb29raW5nSW5wdXRcIjtcbmltcG9ydCB7IEJvb2tpbmdFbnRpdHkgfSBmcm9tIFwiLi9lbnRpdGllcy9ib29raW5nRW50aXR5XCI7XG5pbXBvcnQgeyBNdXRhdGlvbkNyZWF0ZUFwYXJ0bWVudEJvb2tpbmdBcmdzLCBCb29raW5nIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3R5cGVzL2FwcHN5bmMnXG5cbmltcG9ydCB7IGNyZWF0ZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2xpYi9oZWxwZXJzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFwYXJ0bWVudEJvb2tpbmcoXG4gIGFwcHN5bmNJbnB1dDogTXV0YXRpb25DcmVhdGVBcGFydG1lbnRCb29raW5nQXJncyxcbiAgbG9nZ2VyOiBMb2dnZXJcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCBkb2N1bWVudENsaWVudCA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuICBsZXQgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuQUNNU19EQjtcbiAgY29uc3QgQk9PS0lOR19RVUVVRV9VUkwgPSBwcm9jZXNzLmVudi5CT09LSU5HX1FVRVVFX1VSTDtcbiAgY29uc3QgY3JlYXRlZE9uID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xuICBjb25zdCBpZDogc3RyaW5nID0gdXVpZCgpO1xuICBjb25zdCBzcXMgPSBuZXcgU1FTKCk7XG5cbiAgY29uc29sZS5sb2coYXBwc3luY0lucHV0LmlucHV0KTtcblxuICBpZiAoQk9PS0lOR19RVUVVRV9VUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIGxvZ2dlci5lcnJvcihgQ291bGRuJ3QgZ2V0IHRoZSBxdWV1ZSB1cmwgbmFtZWApO1xuICAgIHRocm93IEVycm9yKFwiQ291bGRuJ3QgZ2V0IHF1ZXVlIHVybFwiKTtcbiAgfVxuXG4gIGNvbnN0IGJvb2tpbmdJbnB1dCA9IGNyZWF0ZUl0ZW0oe1xuICAgIGlkOiBpZCxcbiAgICAuLi5hcHBzeW5jSW5wdXQuaW5wdXQsXG4gICAgY3JlYXRlZE9uLFxuICB9KTtcbiAgaWYgKHRhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBDb3VsZG4ndCBnZXQgdGhlIHRhYmxlIG5hbWVgKTtcbiAgICB0YWJsZU5hbWUgPSBcIkFjbXNEeW5hbW9EQlRhYmxlXCI7XG4gIH1cblxuICBsb2dnZXIuaW5mbyhgY3JlYXRlIGJvb2tpbmcgaW5wdXQgaW5mb1wiLCAke0pTT04uc3RyaW5naWZ5KGJvb2tpbmdJbnB1dCl9YCk7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICBJbmRleE5hbWU6IFwiZ2V0QWxsQXBhcnRtZW50c1BlclVzZXJcIixcbiAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiBcIiNHU0kxUEsgPSA6R1NJMVBLIEFORCAjR1NJMVNLID0gOkdTSTFTS1wiLFxuICAgIEZpbHRlckV4cHJlc3Npb246IFwiI2Jvb2tpbmdTdGF0dXMgPSA6Ym9va2luZ1N0YXR1c1wiLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgXCIjR1NJMVBLXCI6IFwiR1NJMVBLXCIsXG4gICAgICBcIiNHU0kxU0tcIjogXCJHU0kxU0tcIixcbiAgICAgIFwiI2Jvb2tpbmdTdGF0dXNcIjogXCJib29raW5nU3RhdHVzXCIsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICBcIjpHU0kxUEtcIjogYFVTRVIjJHthcHBzeW5jSW5wdXQuaW5wdXQudXNlcklkfWAsXG4gICAgICBcIjpHU0kxU0tcIjogYEFQQVJUTUVOVCMke2FwcHN5bmNJbnB1dC5pbnB1dC5hcGFydG1lbnRJZH1gLFxuICAgICAgXCI6Ym9va2luZ1N0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICB9LFxuICB9O1xuXG4gICAgICBsb2dnZXIuaW5mbyhgc3FzIHByZSBtZXNzYWdlICR7SlNPTi5zdHJpbmdpZnkoYm9va2luZ0lucHV0KX1gKTtcbiAgICAgIGxvZ2dlci5pbmZvKGBzcXMgIHF1ZXVlIHVybCAke0JPT0tJTkdfUVVFVUVfVVJMfWApO1xuICAgICAgY29uc3Qgc3FzUGFyYW1zOiBTUVMuVHlwZXMuU2VuZE1lc3NhZ2VSZXF1ZXN0ID0ge1xuICAgICAgICBNZXNzYWdlQm9keTogSlNPTi5zdHJpbmdpZnkoYm9va2luZ0lucHV0KSxcbiAgICAgICAgUXVldWVVcmw6IEJPT0tJTkdfUVVFVUVfVVJMLFxuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc3FzLnNlbmRNZXNzYWdlKHNxc1BhcmFtcykucHJvbWlzZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBhbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbmRpbmcgbWVzc2FnZSB0byBzcXNcIiwgJHtlcnJvcn1gKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoYGFuIGVycm9yIG9jY3VyZWQgd2hpbGUgc2VuZGluZyBtZXNzYWdlIHRvIHNxc1wiLCAke2Vycm9yfWApO1xuICAgICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBcGFydG1lbnRCb29raW5nO1xuIl19