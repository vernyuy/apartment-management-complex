"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@aws-lambda-powertools/logger");
const aws_sdk_1 = require("aws-sdk");
const tracer_1 = require("@aws-lambda-powertools/tracer");
const namespace = "ApartmentComplexManagementApp";
const serviceName = "bookingHandler";
const logger = new logger_1.Logger({ logLevel: "INFO", serviceName: serviceName });
const tracer = new tracer_1.Tracer({ serviceName: serviceName });
exports.handler = async (event, context) => {
    let tableName = process.env.ACMS_DB;
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    const failedMessageIds = [];
    logger.addContext(context);
    logger.info(`SQS events are ${JSON.stringify(event.Records)}`);
    const promises = event.Records.map(async (value) => {
        try {
            const bookingDetails = JSON.parse(value.body);
            if (tableName === undefined) {
                logger.error(`Couldn't get the table name`);
                tableName = "AcmsDynamoDBTable";
            }
            const params = {
                TableName: tableName,
                Item: bookingDetails,
            };
            logger.info(`put parameters for booking is ${JSON.stringify(params)}`);
            await documentClient.put(params).promise();
        }
        catch (error) {
            logger.error(`an error occured during put booking ${JSON.stringify(error)}`);
            failedMessageIds.push(value.messageId);
        }
    });
    // execute all promises
    await Promise.all(promises);
    return {
        batchItemFailures: failedMessageIds.map((id) => {
            return {
                itemIdentifier: id,
            };
        }),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc1Nxc0Jvb2tpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9jZXNzU3FzQm9va2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBEQUF1RDtBQUN2RCxxQ0FBbUM7QUFJbkMsMERBQXVEO0FBR3ZELE1BQU0sU0FBUyxHQUFHLCtCQUErQixDQUFDO0FBQ2xELE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUMxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBRXhELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxPQUFnQixFQUFFLEVBQUU7SUFDNUQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDcEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JELE1BQU0sZ0JBQWdCLEdBQWEsRUFBRSxDQUFDO0lBRXRDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFnQixFQUFFLEVBQUU7UUFDNUQsSUFBSTtZQUNGLE1BQU0sY0FBYyxHQUE2QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4RSxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztnQkFDNUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDO2FBQ2pDO1lBQ0QsTUFBTSxNQUFNLEdBQUc7Z0JBQ2IsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLElBQUksRUFBRSxjQUFjO2FBQ3JCLENBQUM7WUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2RSxNQUFNLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDNUM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQ1YsdUNBQXVDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDL0QsQ0FBQztZQUNGLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILHVCQUF1QjtJQUN2QixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFNUIsT0FBTztRQUNMLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQzdDLE9BQU87Z0JBQ0wsY0FBYyxFQUFFLEVBQUU7YUFDbkIsQ0FBQztRQUNKLENBQUMsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGF3cy1sYW1iZGEtcG93ZXJ0b29scy9sb2dnZXJcIjtcbmltcG9ydCB7IER5bmFtb0RCIH0gZnJvbSBcImF3cy1zZGtcIjtcblxuaW1wb3J0IHsgQ29udGV4dCwgU1FTRXZlbnQsIFNRU1JlY29yZCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5cbmltcG9ydCB7IFRyYWNlciB9IGZyb20gXCJAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL3RyYWNlclwiO1xuaW1wb3J0IHsgUHV0SXRlbUlucHV0QXR0cmlidXRlTWFwIH0gZnJvbSBcImF3cy1zZGsvY2xpZW50cy9keW5hbW9kYlwiO1xuXG5jb25zdCBuYW1lc3BhY2UgPSBcIkFwYXJ0bWVudENvbXBsZXhNYW5hZ2VtZW50QXBwXCI7XG5jb25zdCBzZXJ2aWNlTmFtZSA9IFwiYm9va2luZ0hhbmRsZXJcIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih7IGxvZ0xldmVsOiBcIklORk9cIiwgc2VydmljZU5hbWU6IHNlcnZpY2VOYW1lIH0pO1xuY29uc3QgdHJhY2VyID0gbmV3IFRyYWNlcih7IHNlcnZpY2VOYW1lOiBzZXJ2aWNlTmFtZSB9KTtcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBTUVNFdmVudCwgY29udGV4dDogQ29udGV4dCkgPT4ge1xuICBsZXQgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuQUNNU19EQjtcbiAgY29uc3QgZG9jdW1lbnRDbGllbnQgPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbiAgY29uc3QgZmFpbGVkTWVzc2FnZUlkczogc3RyaW5nW10gPSBbXTtcblxuICBsb2dnZXIuYWRkQ29udGV4dChjb250ZXh0KTtcblxuICBsb2dnZXIuaW5mbyhgU1FTIGV2ZW50cyBhcmUgJHtKU09OLnN0cmluZ2lmeShldmVudC5SZWNvcmRzKX1gKTtcblxuICBjb25zdCBwcm9taXNlcyA9IGV2ZW50LlJlY29yZHMubWFwKGFzeW5jICh2YWx1ZTogU1FTUmVjb3JkKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJvb2tpbmdEZXRhaWxzOiBQdXRJdGVtSW5wdXRBdHRyaWJ1dGVNYXAgPSBKU09OLnBhcnNlKHZhbHVlLmJvZHkpO1xuICAgICAgaWYgKHRhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihgQ291bGRuJ3QgZ2V0IHRoZSB0YWJsZSBuYW1lYCk7XG4gICAgICAgIHRhYmxlTmFtZSA9IFwiQWNtc0R5bmFtb0RCVGFibGVcIjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IGJvb2tpbmdEZXRhaWxzLFxuICAgICAgfTtcblxuICAgICAgbG9nZ2VyLmluZm8oYHB1dCBwYXJhbWV0ZXJzIGZvciBib29raW5nIGlzICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKTtcbiAgICAgIGF3YWl0IGRvY3VtZW50Q2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICBgYW4gZXJyb3Igb2NjdXJlZCBkdXJpbmcgcHV0IGJvb2tpbmcgJHtKU09OLnN0cmluZ2lmeShlcnJvcil9YFxuICAgICAgKTtcbiAgICAgIGZhaWxlZE1lc3NhZ2VJZHMucHVzaCh2YWx1ZS5tZXNzYWdlSWQpO1xuICAgIH1cbiAgfSk7XG4gIC8vIGV4ZWN1dGUgYWxsIHByb21pc2VzXG4gIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcblxuICByZXR1cm4ge1xuICAgIGJhdGNoSXRlbUZhaWx1cmVzOiBmYWlsZWRNZXNzYWdlSWRzLm1hcCgoaWQpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1JZGVudGlmaWVyOiBpZCxcbiAgICAgIH07XG4gICAgfSksXG4gIH07XG59O1xuIl19