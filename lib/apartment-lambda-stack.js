"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApartmentLamdaStacks = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const helpers_1 = require("./helpers");
const path_1 = require("path");
class ApartmentLamdaStacks extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { acmsDatabase, acmsGraphqlApi } = props;
        const apartmentFunction = new appsync.AppsyncFunction(this, "createApartment", {
            name: "createApartment",
            api: acmsGraphqlApi,
            dataSource: acmsGraphqlApi.addDynamoDbDataSource("createApartment", acmsDatabase),
            code: (0, helpers_1.bundleAppSyncResolver)("src/resolvers/apartment/createApartment.ts"),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
        });
        new appsync.Resolver(this, "createApartmentResolver", {
            api: acmsGraphqlApi,
            typeName: "Mutation",
            fieldName: "createApartment",
            code: appsync.Code.fromAsset((0, path_1.join)(__dirname, "./js_resolvers/_before_and_after_mapping_template.js")),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
            pipelineConfig: [apartmentFunction],
        });
        const getAllApartmentsPerBuilding = new appsync.AppsyncFunction(this, "getAllApartmentsPerBuilding", {
            name: "getAllApartmentsPerBuilding",
            api: acmsGraphqlApi,
            dataSource: acmsGraphqlApi.addDynamoDbDataSource("getAllApartmentsPerBuilding", acmsDatabase),
            code: (0, helpers_1.bundleAppSyncResolver)("src/resolvers/apartment/getAllApartmentsPerBuilding.ts"),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
        });
        new appsync.Resolver(this, "getAllApartmentsPerBuildingResolver", {
            api: acmsGraphqlApi,
            typeName: "Query",
            fieldName: "getAllApartmentsPerBuilding",
            code: appsync.Code.fromAsset((0, path_1.join)(__dirname, "./js_resolvers/_before_and_after_mapping_template.js")),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
            pipelineConfig: [getAllApartmentsPerBuilding],
        });
    }
}
exports.ApartmentLamdaStacks = ApartmentLamdaStacks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBhcnRtZW50LWxhbWJkYS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwYXJ0bWVudC1sYW1iZGEtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWdEO0FBR2hELG1EQUFtRDtBQUNuRCx1Q0FBa0Q7QUFDbEQsK0JBQTRCO0FBTzVCLE1BQWEsb0JBQXFCLFNBQVEsbUJBQUs7SUFDN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFnQztRQUN4RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUUvQyxNQUFNLGlCQUFpQixHQUFHLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FDbkQsSUFBSSxFQUNKLGlCQUFpQixFQUNqQjtZQUNFLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsR0FBRyxFQUFFLGNBQWM7WUFDbkIsVUFBVSxFQUFFLGNBQWMsQ0FBQyxxQkFBcUIsQ0FDOUMsaUJBQWlCLEVBQ2pCLFlBQVksQ0FDYjtZQUNELElBQUksRUFBRSxJQUFBLCtCQUFxQixFQUN6Qiw0Q0FBNEMsQ0FDN0M7WUFDRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRO1NBQzFDLENBQ0YsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUseUJBQXlCLEVBQUU7WUFDcEQsR0FBRyxFQUFFLGNBQWM7WUFDbkIsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFLGlCQUFpQjtZQUM1QixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQzFCLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxzREFBc0QsQ0FBQyxDQUN4RTtZQUNELE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVE7WUFDekMsY0FBYyxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQzdELElBQUksRUFDSiw2QkFBNkIsRUFDN0I7WUFDRSxJQUFJLEVBQUUsNkJBQTZCO1lBQ25DLEdBQUcsRUFBRSxjQUFjO1lBQ25CLFVBQVUsRUFBRSxjQUFjLENBQUMscUJBQXFCLENBQzlDLDZCQUE2QixFQUM3QixZQUFZLENBQ2I7WUFDRCxJQUFJLEVBQUUsSUFBQSwrQkFBcUIsRUFDekIsd0RBQXdELENBQ3pEO1lBQ0QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsUUFBUTtTQUMxQyxDQUNGLENBQUM7UUFFRixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxFQUFFO1lBQ2hFLEdBQUcsRUFBRSxjQUFjO1lBQ25CLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFNBQVMsRUFBRSw2QkFBNkI7WUFDeEMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUMxQixJQUFBLFdBQUksRUFBQyxTQUFTLEVBQUUsc0RBQXNELENBQUMsQ0FDeEU7WUFDRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRO1lBQ3pDLGNBQWMsRUFBRSxDQUFDLDJCQUEyQixDQUFDO1NBQzlDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQTlERCxvREE4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjaywgU3RhY2tQcm9wcyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgYXBwc3luYyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWFwcHN5bmNcIjtcbmltcG9ydCB7IGJ1bmRsZUFwcFN5bmNSZXNvbHZlciB9IGZyb20gXCIuL2hlbHBlcnNcIjtcbmltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuXG5pbnRlcmZhY2UgQXBhcnRtZW50TGFtYmRhU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMge1xuICBhY21zR3JhcGhxbEFwaTogYXBwc3luYy5HcmFwaHFsQXBpO1xuICBhY21zRGF0YWJhc2U6IFRhYmxlO1xufVxuXG5leHBvcnQgY2xhc3MgQXBhcnRtZW50TGFtZGFTdGFja3MgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcGFydG1lbnRMYW1iZGFTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCB7IGFjbXNEYXRhYmFzZSwgYWNtc0dyYXBocWxBcGkgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgYXBhcnRtZW50RnVuY3Rpb24gPSBuZXcgYXBwc3luYy5BcHBzeW5jRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgXCJjcmVhdGVBcGFydG1lbnRcIixcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJjcmVhdGVBcGFydG1lbnRcIixcbiAgICAgICAgYXBpOiBhY21zR3JhcGhxbEFwaSxcbiAgICAgICAgZGF0YVNvdXJjZTogYWNtc0dyYXBocWxBcGkuYWRkRHluYW1vRGJEYXRhU291cmNlKFxuICAgICAgICAgIFwiY3JlYXRlQXBhcnRtZW50XCIsXG4gICAgICAgICAgYWNtc0RhdGFiYXNlLFxuICAgICAgICApLFxuICAgICAgICBjb2RlOiBidW5kbGVBcHBTeW5jUmVzb2x2ZXIoXG4gICAgICAgICAgXCJzcmMvcmVzb2x2ZXJzL2FwYXJ0bWVudC9jcmVhdGVBcGFydG1lbnQudHNcIixcbiAgICAgICAgKSxcbiAgICAgICAgcnVudGltZTogYXBwc3luYy5GdW5jdGlvblJ1bnRpbWUuSlNfMV8wXzAsXG4gICAgICB9LFxuICAgICk7XG5cbiAgICBuZXcgYXBwc3luYy5SZXNvbHZlcih0aGlzLCBcImNyZWF0ZUFwYXJ0bWVudFJlc29sdmVyXCIsIHtcbiAgICAgIGFwaTogYWNtc0dyYXBocWxBcGksXG4gICAgICB0eXBlTmFtZTogXCJNdXRhdGlvblwiLFxuICAgICAgZmllbGROYW1lOiBcImNyZWF0ZUFwYXJ0bWVudFwiLFxuICAgICAgY29kZTogYXBwc3luYy5Db2RlLmZyb21Bc3NldChcbiAgICAgICAgam9pbihfX2Rpcm5hbWUsIFwiLi9qc19yZXNvbHZlcnMvX2JlZm9yZV9hbmRfYWZ0ZXJfbWFwcGluZ190ZW1wbGF0ZS5qc1wiKSxcbiAgICAgICksXG4gICAgICBydW50aW1lOiBhcHBzeW5jLkZ1bmN0aW9uUnVudGltZS5KU18xXzBfMCxcbiAgICAgIHBpcGVsaW5lQ29uZmlnOiBbYXBhcnRtZW50RnVuY3Rpb25dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZ2V0QWxsQXBhcnRtZW50c1BlckJ1aWxkaW5nID0gbmV3IGFwcHN5bmMuQXBwc3luY0Z1bmN0aW9uKFxuICAgICAgdGhpcyxcbiAgICAgIFwiZ2V0QWxsQXBhcnRtZW50c1BlckJ1aWxkaW5nXCIsXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ2V0QWxsQXBhcnRtZW50c1BlckJ1aWxkaW5nXCIsXG4gICAgICAgIGFwaTogYWNtc0dyYXBocWxBcGksXG4gICAgICAgIGRhdGFTb3VyY2U6IGFjbXNHcmFwaHFsQXBpLmFkZER5bmFtb0RiRGF0YVNvdXJjZShcbiAgICAgICAgICBcImdldEFsbEFwYXJ0bWVudHNQZXJCdWlsZGluZ1wiLFxuICAgICAgICAgIGFjbXNEYXRhYmFzZSxcbiAgICAgICAgKSxcbiAgICAgICAgY29kZTogYnVuZGxlQXBwU3luY1Jlc29sdmVyKFxuICAgICAgICAgIFwic3JjL3Jlc29sdmVycy9hcGFydG1lbnQvZ2V0QWxsQXBhcnRtZW50c1BlckJ1aWxkaW5nLnRzXCIsXG4gICAgICAgICksXG4gICAgICAgIHJ1bnRpbWU6IGFwcHN5bmMuRnVuY3Rpb25SdW50aW1lLkpTXzFfMF8wLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgbmV3IGFwcHN5bmMuUmVzb2x2ZXIodGhpcywgXCJnZXRBbGxBcGFydG1lbnRzUGVyQnVpbGRpbmdSZXNvbHZlclwiLCB7XG4gICAgICBhcGk6IGFjbXNHcmFwaHFsQXBpLFxuICAgICAgdHlwZU5hbWU6IFwiUXVlcnlcIixcbiAgICAgIGZpZWxkTmFtZTogXCJnZXRBbGxBcGFydG1lbnRzUGVyQnVpbGRpbmdcIixcbiAgICAgIGNvZGU6IGFwcHN5bmMuQ29kZS5mcm9tQXNzZXQoXG4gICAgICAgIGpvaW4oX19kaXJuYW1lLCBcIi4vanNfcmVzb2x2ZXJzL19iZWZvcmVfYW5kX2FmdGVyX21hcHBpbmdfdGVtcGxhdGUuanNcIiksXG4gICAgICApLFxuICAgICAgcnVudGltZTogYXBwc3luYy5GdW5jdGlvblJ1bnRpbWUuSlNfMV8wXzAsXG4gICAgICBwaXBlbGluZUNvbmZpZzogW2dldEFsbEFwYXJ0bWVudHNQZXJCdWlsZGluZ10sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==