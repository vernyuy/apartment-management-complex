"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DdbStreamLamdaStacks = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const signer = require("aws-cdk-lib/aws-signer");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const path = require("path");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const sqs = require("aws-cdk-lib/aws-sqs");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
class DdbStreamLamdaStacks extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { acmsDatabase, acmsGraphqlApi, apiSchema } = props;
        const deadLetterQueue = new sqs.Queue(this, "DeadLetterQueueDDB");
        const signingProfile = new signer.SigningProfile(this, "SigningProfile", {
            platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,
        });
        const codeSigningConfig = new lambda.CodeSigningConfig(this, "CodeSigningConfig", {
            signingProfiles: [signingProfile],
        });
        /**
         * read dynamodb stream
         *
         */
        const readDDBStreamLambda = new aws_lambda_nodejs_1.NodejsFunction(this, "ReadDDBStreamHandler", {
            tracing: aws_lambda_1.Tracing.ACTIVE,
            codeSigningConfig,
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: "handler",
            entry: path.join(__dirname, "lambda-fns/ddbstream", "app.ts"),
            memorySize: 1024,
        });
        //add dynamodb stream event source
        readDDBStreamLambda.addEventSource(new aws_lambda_event_sources_1.DynamoEventSource(acmsDatabase, {
            startingPosition: lambda.StartingPosition.TRIM_HORIZON,
            batchSize: 5,
            bisectBatchOnError: true,
            onFailure: new aws_lambda_event_sources_1.SqsDlq(deadLetterQueue),
            retryAttempts: 10,
        }));
        readDDBStreamLambda.role?.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("service-role/AWSAppSyncPushToCloudWatchLogs"));
        acmsDatabase.grantFullAccess(readDDBStreamLambda);
        readDDBStreamLambda.addEnvironment("ACMS_DB", acmsDatabase.tableName);
    }
}
exports.DdbStreamLamdaStacks = DdbStreamLamdaStacks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGRiLXN0cmVhbS1sYW1iZGEtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZGItc3RyZWFtLWxhbWJkYS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBZ0Q7QUFPaEQsaURBQWlEO0FBRWpELGlEQUFvRDtBQUNwRCxpREFBaUQ7QUFFakQsNkJBQTZCO0FBQzdCLHFFQUErRDtBQUMvRCwyQ0FBMkM7QUFDM0MsdURBQWlEO0FBR2pELG1GQUc4QztBQVE5QyxNQUFhLG9CQUFxQixTQUFRLG1CQUFLO0lBQzdDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBZ0M7UUFDeEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRTFELE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUVsRSxNQUFNLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQ3ZFLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLHVCQUF1QjtTQUNsRCxDQUFDLENBQUM7UUFFSCxNQUFNLGlCQUFpQixHQUFHLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUNwRCxJQUFJLEVBQ0osbUJBQW1CLEVBQ25CO1lBQ0UsZUFBZSxFQUFFLENBQUMsY0FBYyxDQUFDO1NBQ2xDLENBQ0YsQ0FBQztRQUVGOzs7V0FHRztRQUVILE1BQU0sbUJBQW1CLEdBQW1CLElBQUksa0NBQWMsQ0FDNUQsSUFBSSxFQUNKLHNCQUFzQixFQUN0QjtZQUNFLE9BQU8sRUFBRSxvQkFBTyxDQUFDLE1BQU07WUFDdkIsaUJBQWlCO1lBQ2pCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLFNBQVM7WUFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsQ0FBQztZQUU3RCxVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUNGLENBQUM7UUFFRixrQ0FBa0M7UUFDbEMsbUJBQW1CLENBQUMsY0FBYyxDQUNoQyxJQUFJLDRDQUFpQixDQUFDLFlBQVksRUFBRTtZQUNsQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWTtZQUN0RCxTQUFTLEVBQUUsQ0FBQztZQUNaLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsU0FBUyxFQUFFLElBQUksaUNBQU0sQ0FBQyxlQUFlLENBQUM7WUFDdEMsYUFBYSxFQUFFLEVBQUU7U0FDbEIsQ0FBQyxDQUNILENBQUM7UUFFRixtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQ3hDLHVCQUFhLENBQUMsd0JBQXdCLENBQ3BDLDZDQUE2QyxDQUM5QyxDQUNGLENBQUM7UUFFRixZQUFZLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbEQsbUJBQW1CLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGO0FBM0RELG9EQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge1xuICBDZm5EYXRhU291cmNlLFxuICBDZm5HcmFwaFFMQXBpLFxuICBDZm5HcmFwaFFMU2NoZW1hLFxuICBDZm5SZXNvbHZlcixcbn0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcHBzeW5jXCI7XG5pbXBvcnQgKiBhcyBzaWduZXIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1zaWduZXJcIjtcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqc1wiO1xuaW1wb3J0ICogYXMgc3FzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc3FzXCI7XG5pbXBvcnQgeyBUcmFjaW5nIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcbmltcG9ydCAqIGFzIGFwcHN5bmMgZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcHBzeW5jXCJcblxuaW1wb3J0IHtcbiAgRHluYW1vRXZlbnRTb3VyY2UsXG4gIFNxc0RscSxcbn0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGEtZXZlbnQtc291cmNlc1wiO1xuXG5pbnRlcmZhY2UgRGRiU3RyZWFtTGFtYmRhU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMge1xuICBhY21zR3JhcGhxbEFwaTogYXBwc3luYy5HcmFwaHFsQXBpO1xuICBhcGlTY2hlbWE6IENmbkdyYXBoUUxTY2hlbWE7XG4gIGFjbXNEYXRhYmFzZTogVGFibGU7XG59XG5cbmV4cG9ydCBjbGFzcyBEZGJTdHJlYW1MYW1kYVN0YWNrcyBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERkYlN0cmVhbUxhbWJkYVN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHsgYWNtc0RhdGFiYXNlLCBhY21zR3JhcGhxbEFwaSwgYXBpU2NoZW1hIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGRlYWRMZXR0ZXJRdWV1ZSA9IG5ldyBzcXMuUXVldWUodGhpcywgXCJEZWFkTGV0dGVyUXVldWVEREJcIik7XG5cbiAgICBjb25zdCBzaWduaW5nUHJvZmlsZSA9IG5ldyBzaWduZXIuU2lnbmluZ1Byb2ZpbGUodGhpcywgXCJTaWduaW5nUHJvZmlsZVwiLCB7XG4gICAgICBwbGF0Zm9ybTogc2lnbmVyLlBsYXRmb3JtLkFXU19MQU1CREFfU0hBMzg0X0VDRFNBLFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29kZVNpZ25pbmdDb25maWcgPSBuZXcgbGFtYmRhLkNvZGVTaWduaW5nQ29uZmlnKFxuICAgICAgdGhpcyxcbiAgICAgIFwiQ29kZVNpZ25pbmdDb25maWdcIixcbiAgICAgIHtcbiAgICAgICAgc2lnbmluZ1Byb2ZpbGVzOiBbc2lnbmluZ1Byb2ZpbGVdLFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvKipcbiAgICAgKiByZWFkIGR5bmFtb2RiIHN0cmVhbVxuICAgICAqXG4gICAgICovXG5cbiAgICBjb25zdCByZWFkRERCU3RyZWFtTGFtYmRhOiBOb2RlanNGdW5jdGlvbiA9IG5ldyBOb2RlanNGdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBcIlJlYWREREJTdHJlYW1IYW5kbGVyXCIsXG4gICAgICB7XG4gICAgICAgIHRyYWNpbmc6IFRyYWNpbmcuQUNUSVZFLFxuICAgICAgICBjb2RlU2lnbmluZ0NvbmZpZyxcbiAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE2X1gsXG4gICAgICAgIGhhbmRsZXI6IFwiaGFuZGxlclwiLFxuICAgICAgICBlbnRyeTogcGF0aC5qb2luKF9fZGlybmFtZSwgXCJsYW1iZGEtZm5zL2RkYnN0cmVhbVwiLCBcImFwcC50c1wiKSxcblxuICAgICAgICBtZW1vcnlTaXplOiAxMDI0LFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvL2FkZCBkeW5hbW9kYiBzdHJlYW0gZXZlbnQgc291cmNlXG4gICAgcmVhZEREQlN0cmVhbUxhbWJkYS5hZGRFdmVudFNvdXJjZShcbiAgICAgIG5ldyBEeW5hbW9FdmVudFNvdXJjZShhY21zRGF0YWJhc2UsIHtcbiAgICAgICAgc3RhcnRpbmdQb3NpdGlvbjogbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uVFJJTV9IT1JJWk9OLFxuICAgICAgICBiYXRjaFNpemU6IDUsXG4gICAgICAgIGJpc2VjdEJhdGNoT25FcnJvcjogdHJ1ZSxcbiAgICAgICAgb25GYWlsdXJlOiBuZXcgU3FzRGxxKGRlYWRMZXR0ZXJRdWV1ZSksXG4gICAgICAgIHJldHJ5QXR0ZW1wdHM6IDEwLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmVhZEREQlN0cmVhbUxhbWJkYS5yb2xlPy5hZGRNYW5hZ2VkUG9saWN5KFxuICAgICAgTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoXG4gICAgICAgIFwic2VydmljZS1yb2xlL0FXU0FwcFN5bmNQdXNoVG9DbG91ZFdhdGNoTG9nc1wiXG4gICAgICApXG4gICAgKTtcblxuICAgIGFjbXNEYXRhYmFzZS5ncmFudEZ1bGxBY2Nlc3MocmVhZEREQlN0cmVhbUxhbWJkYSk7XG4gICAgcmVhZEREQlN0cmVhbUxhbWJkYS5hZGRFbnZpcm9ubWVudChcIkFDTVNfREJcIiwgYWNtc0RhdGFiYXNlLnRhYmxlTmFtZSk7XG4gIH1cbn1cbiJdfQ==